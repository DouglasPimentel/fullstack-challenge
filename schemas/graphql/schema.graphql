"""The root of all... queries"""
type Query {
  """The ID of an object"""
  id: ID!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  tools(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ToolConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type ToolConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [ToolEdge]!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ToolEdge {
  """The item at the end of the edge"""
  node: Tool!

  """A cursor for use in pagination"""
  cursor: String!
}

"""Tool data"""
type Tool implements Node {
  """The ID of an object"""
  id: ID!
  _id: String!
  name: String!
  link: String!
  description: String!
  tags: [String]!
  userId: String!
  created_at: String
  updated_at: String
}

"""All mutations"""
type Mutation {
  UserRegisterMutation(input: UserRegisterMutationInput!): UserRegisterMutationPayload
  UserLoginMutation(input: UserLoginMutationInput!): UserLoginMutationPayload
  AddToolMutation(input: AddToolMutationInput!): AddToolMutationPayload
  ToolUpdateMutation(input: ToolUpdateMutationInput!): ToolUpdateMutationPayload
  ToolDeleteMutation(input: ToolDeleteMutationInput!): ToolDeleteMutationPayload
}

type UserRegisterMutationPayload {
  user: User
  error: String
  clientMutationId: String
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String!
  name: String!
  email: String!
  password: String!
  created_at: String
  updated_at: String
}

input UserRegisterMutationInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginMutationPayload {
  token: String
  error: String
  clientMutationId: String
}

input UserLoginMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type AddToolMutationPayload {
  tool: Tool
  error: String
  clientMutationId: String
}

input AddToolMutationInput {
  name: String!
  link: String!
  description: String!
  tags: [String]!
  clientMutationId: String
}

type ToolUpdateMutationPayload {
  message: String
  error: String
  clientMutationId: String
}

input ToolUpdateMutationInput {
  id: String!
  name: String
  link: String
  description: String
  tags: [String]
  clientMutationId: String
}

type ToolDeleteMutationPayload {
  message: String
  error: String
  clientMutationId: String
}

input ToolDeleteMutationInput {
  id: String!
  clientMutationId: String
}